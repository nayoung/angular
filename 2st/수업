* b.cc 라고 할때 [.]을 [레퍼런스 연산자]라고한다

deep copy - 객체는 메모리주소를 가르키기에 리엑트에서는 deep copy라는것을 해서 메모리주소를 다시할당해서 객체 안의 값을 바꿈

* es5
object.assign(target, ... source); // source 나머지연산자

var book = {title: "콩쥐팥쥐", price: 20000, author: "미상", order: 1};
var deep1 = object.assign({}, book, title: '장화홍련');  // {}객체를 만들고, book을 {}에 복사, title이 복사된객체에 위치하기에 title도 복사
console.log(deep1);

* es6 스프레드연산자이용
var deep2 = {...book};
deep2.title = "장화홍련";

console.log(book.title);  //장화홍련
console.log(deep1);

* 셀로 copy - 같은메모리로 copy
var book = {title: "콩쥐팥쥐", price: 20000, author: "미상", order: 1};
var temp = book;
temp.title = "장화홍련";
console.log(book.title);  //장화홍련
console.log(temp.title);  //장화홍련

const - final값
const a =1;
a=2; // error!!

const b = {bb:1};
b.bb = 2; // b에대한 메모리주소는 바뀌지 않으므로 error이 아님

var tempBook = books.map(book => book);
console.log(tempBook === book); // false!!
book안의 객체를 새로운 배열tempBook 에다가 다시넣음
tempBook과 book의 메모리주소가 다름
배열 안의 객체의 메모리주소는 같음

----------------------------------------------------
* message - 부모 & 자식간의 servcie 처리

* app.module.ts에서 라우팅처리됨

* <a routerLink="/dashboard" routerLinkActive="active">Dashboard</a>
routerLink = herf 역확을 함

routerLinkActive 해당 라우팅이 됐을떄 class처리됨


* es6 템플릿스트링
console.log('string text');
-> console.log(`string ${text}`);
text 변수가 들어감 백틱, ${변수}
